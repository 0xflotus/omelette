{"name":"Omelette","tagline":"Omelette.js Simple Autocompletion Helper for Node","body":"# Omelette.js v0.0.1\r\n\r\n```bash\r\nnpm install omelette\r\n```\r\n\r\nOmelette is a simple, template based autocompletion tool for Node projects.\r\n\r\nYou just have to decide your program name and CLI fragments.\r\n\r\n```coffeescript\r\nomelette \"githubber <module> <command> <suboption>\"\r\n```\r\n\r\nAnd you are almost done!\r\n\r\n![Example](https://raw.github.com/f/omelette/master/resources/omelette.gif)\r\n\r\n## Quickstart\r\n\r\nImplementing omelette is very easy.\r\n\r\n```coffeescript\r\n#!/usr/bin/env coffee\r\n\r\nomelette = require \"omelette\"\r\ncomp = omelette \"programname <firstargument>\"\r\n\r\ncomp.on \"firstargument\", ->\r\n  @reply [\"hello\", \"cruel\", \"world\"]\r\n\r\ncomp.init()\r\n```\r\n\r\n### Code\r\n\r\nIt's based on a simple CLI template.\r\n\r\nLet's think we have a executable file with the name **githubber**, *in a global path*.\r\n\r\nAnd in our program, code will be:\r\n\r\n```coffeescript\r\n#!/usr/bin/env coffee\r\n\r\nomelette = require \"omelette\"\r\n\r\n# Write your CLI template.\r\ncomplete = omelette \"githubber <action> <user> <repo>\"\r\n\r\n# Bind events for every template part.\r\ncomplete.on \"action\", -> @reply [\"clone\", \"update\", \"push\"]\r\n\r\ncomplete.on \"user\", (action)-> @reply fs.readdirSync \"/Users/\"\r\n\r\ncomplete.on \"repo\", (user)->\r\n  @reply [\r\n    \"http://github.com/#{user}/helloworld\"\r\n    \"http://github.com/#{user}/blabla\"\r\n  ]\r\n\r\n# Initialize the omelette.\r\ncomplete.init()\r\n\r\n# Rest is yours\r\nconsole.log \"Your program's default workflow.\"\r\nconsole.log process.argv\r\n```\r\n\r\nIf you like oldschool:\r\n\r\n```javascript\r\nvar fs = require(\"fs\"), \r\n    omelette = require(\"omelette\");\r\n\r\n// Write your CLI template.\r\nvar complete = omelette(\"githubber <action> <user> <repo>\");\r\n\r\ncomplete.on(\"action\", function() {\r\n  return this.reply([\"clone\", \"update\", \"push\"]);\r\n});\r\n\r\ncomplete.on(\"user\", function(action) {\r\n  return this.reply(fs.readdirSync(\"/Users/\"));\r\n});\r\n\r\ncomplete.on(\"repo\", function(user) {\r\n  return this.reply([\r\n    \"http://github.com/\" + user + \"/helloworld\", \r\n    \"http://github.com/\" + user + \"/blabla\"\r\n  ]);\r\n});\r\n\r\n// Initialize the omelette.\r\ncomplete.init();\r\n\r\n// Rest is yours.\r\nconsole.log(\"Your program's default workflow.\");\r\nconsole.log(process.argv);\r\n```\r\n\r\n`complete.reply` is the completion replier. You should pass the options into that method.\r\n\r\n### Install\r\n\r\nInstalling, and making your users install the autocompletion feature is very simple.\r\n\r\nIn **zsh**, you can write these:\r\n\r\n```bash\r\necho '. <(./githubber --completion)' >> .zshrc\r\n```\r\n\r\nIn **bash**, you should write:\r\n\r\n```bash\r\n./githubber --completion >> ~/githubber.completion.sh\r\necho 'source ~/githubber.completion.sh' >> .bash_profile\r\n```\r\n\r\nThat's all!\r\n\r\nNow you have an autocompletion system for your CLI tool.\r\n\r\n## Additions\r\n\r\nThere are some useful additions for omelette.\r\n\r\n###Â Parameters\r\n\r\nCallbacks have three parameters:\r\n\r\n  - The number of fragment *just for global event*\r\n  - The parent word.\r\n  - The whole command line buffer allow you to parse and reply as you wish.\r\n\r\n### Global Event\r\n\r\nYou also can be able to listen all fragments by \"complete\" event.\r\n\r\n```coffeescript\r\ncomplete.on \"complete\", (fragment, word, line)-> @reply [\"hello\", \"world\"]\r\n```\r\n\r\n### Numbered Arguments\r\n\r\nYou also can listen events by its order.\r\n\r\n```coffeescript\r\ncomplete.on \"$1\", (word, line)-> @reply [\"hello\", \"world\"]\r\n```\r\n\r\n## Test\r\n\r\nNow, you can try it in your shell.\r\n\r\n```bash\r\n$ ./githubber<tab>\r\nclone update push\r\n```\r\n\r\n```bash\r\n$ ./githubber cl<tab>\r\n$ ./githubber clone<tab>\r\nGuest fka\r\n```\r\n\r\n```bash\r\n$ ./githubber clone fka<tab>\r\n$ ./githubber clone fka http://github.com/fka/<tab>\r\nhttp://github.com/fka/helloworld\r\nhttp://github.com/fka/blabla\r\n```\r\n\r\n## Contribute\r\n\r\nI need your contributions to make that work better!\r\n\r\n## License\r\n\r\nThis project licensed under MIT.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}